/// INSTRUCTIONS
instruction = @{ ("print" | "out") ~ WHITE_SPACE }
as_keyword = { "as" }
variable_name = { !instruction ~ !as_keyword ~ !data_type ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

/// TYPES
data_type = { "decimal" | "idecimal" | "complex" | "frac" | "ifrac" | "irrational" }
file_path = { ASCII_ALPHANUMERIC ~ (!"." ~ !"*" ~ !"\"" ~ !"<" ~ !">" ~ !"|" ~ ASCII)* ~ "." ~ ASCII_ALPHANUMERIC+ }
string = !{ "'" ~ ASCII_ALPHANUMERIC+ ~ "'" }
boolean = { "true" | "false" }

/// OPERATORS
multiplication = { "*" }
division = { "/" }
power = { "^" }
modulo = { "%" }
addition = { "+" }
subtraction = { "-" }
open_parentheses = { "(" }
close_parentheses = { ")" }
operators = _{ open_parentheses | close_parentheses | power | modulo | multiplication | division | addition | subtraction }

assignment_operator = { "=" }
comma = { "," }

/// NUMBERS
positive_whole_numbers = { ASCII_DIGIT+ }
negative_whole_numbers = @{ subtraction ~ positive_whole_numbers }
integer = _{ negative_whole_numbers | positive_whole_numbers }

fraction = @{ integer ~ "/" ~ positive_whole_numbers }
decimal = @{ integer ~ "." ~ positive_whole_numbers }
numeric_expression = _{ decimal | fraction | negative_whole_numbers | positive_whole_numbers }

/// EXPRESSIONS
simple_math_expression = !{ (numeric_expression ~ variable_name?) | variable_name }
function_call_expression = !{ variable_name ~ open_parentheses ~ simple_math_expression ~ (comma ~ simple_math_expression)* ~ close_parentheses }
math_expression = _{ subtraction? ~ (open_parentheses)* ~ subtraction? ~ (function_call_expression | simple_math_expression) ~ close_parentheses* }
operated_fm_math = !{ math_expression ~ (operators ~ math_expression)* }
expression = ${ operated_fm_math ~ (WHITE_SPACE? ~ as_keyword ~ WHITE_SPACE ~ data_type)? }

/// STATEMENTS
operation_argument = ${ variable_name ~ WHITE_SPACE ~ (boolean | file_path | data_type | expression | string ) }
operation = { instruction ~ expression }
in_operation = ${ "in" ~ WHITE_SPACE ~ variable_name }
graph_operation = ${ "graph" ~ WHITE_SPACE ~ variable_name }
use_operation = ${ "use" ~ WHITE_SPACE ~ file_path }

constant = { variable_name ~ (comma ~ variable_name)* ~ assignment_operator ~ expression }
function_declaration = { variable_name ~ open_parentheses ~ variable_name ~ (comma ~ variable_name)* ~ close_parentheses ~ assignment_operator ~ expression }
line_comment = _{ "//" ~ ANY* } 

line = { line_comment | in_operation | use_operation | graph_operation | operation | operation_argument | function_declaration | constant }
file = { SOI ~ "\n"* ~ (line ~ "\n"+)* ~ line? ~ EOI }

/// SPECIAL
WHITESPACE = _{ " " }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }